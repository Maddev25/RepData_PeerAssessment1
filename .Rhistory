with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, fileset = "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
bye()
swirl()
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(car$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data =state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data =state, layout = c(2,2))
head(mpg)
dim(mpg)
mpg$model
table(mpg$model)
qplot(displ, hwy , data = mpg)
head(airquality)
range(ozone,na.rm = TRUE)
range(airquality$ozone,na.rm = TRUE)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, data = airquality)
boxplot(Ozone ~ Month, data = airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
info()
skip()
bye()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col= "red", pch= 8, main= "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality,pch= 8, col= "red",main= "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = C(5,1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout= c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLables.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"))
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch=20, xlab= myxlab, ylab = myylab, main=mymain)
xyplot(price~carat | color*cut, data = diamonds,pch=20, xlab= myxlab, ylab = myylab, main=mymain)
quit()
quit
quit()
library(swirl)
swirl()
sample(color(),10)
sample(colors(),10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0.1, len=6))
pal(seq(0,1, len=6))
p1 <-colorRampPalette(c("red", "blue"))
p1(2)
pa(6)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x,y, pch= 19, col= rgb(0,0.5,0.5))
plot(x,y, pch= 19, col= rgb(0,0.5,0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data =  mpg, geom = "boxplot")
qplot(drv, hwy, data =  mpg, geom = "boxplot", color= manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth= 2)
qplot(displ, hwy, data = mpg, geom= c("point, "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom= c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+ geom_point()
g+ geom_point()+ geom_smooth()
g+ geom_point()+ geom_smooth(method = "lm")
g+ geom_point()+ geom_smooth(method = "lm") + facet_grid( .~drv)
g+ geom_point()+ geom_smooth(method = "lm") + facet_grid( .~drv) + ggtitle("Swirl Rules!")
g+ geom_point(color="pink", size = 4, alpha = 1/2)
g+ geom_point(color=drv, size = 4, alpha = 1/2)
g+ geom_point(size = 4, alpha = 1/2, aes(color=drv))
g+ geom_point(size = 4, alpha = 1/2, aes(color=drv)) + labs(title= "Swirl Rules!") + labs(x="Displacement", y = "Hwy Mileage")
g+ geom_point(aes(color=drv)) + labs(title= "Swirl Rules!") + labs(x="Displacement", y = "Hwy Mileage")
g+ geom_point(size = 2, alpha = 1/2, aes(color=drv)) + geom_smooth(size=4, linetype = 3, method = "lm", se = FALSE)
g+ geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = 'l', ylim = c(-3,3))
g <- ggplot(testdat, aes(myx, myy))
g + geom_line(0)
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim= c(-3,3))
g <- ggplot(mpg, aes(x= displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(size = 2, color = "black", se = FALSE, method = "lm" )
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)+ geom_smooth(size = 2, color = "black", se = FALSE, method = "lm" ) + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill= cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color= cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape = cut)
qplot(carat, price, data=diamonds, color = cut)
qplot(carat, price, data=diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = "lm"))
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method = "lm") + facets(.~cut)
qplot(carat, price, data=diamonds, color = cut, facets = ~.cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut, facets = ~.5) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut, facets = ~.cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut, facets = ~.cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut, facets = ~.cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, facets = ~.cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color = cut, facets = ~.cut) + geom_smooth(method = "lm")
play()
askf
nxt()
qplot(carat, price, data=diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid (cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid (cut ~ car2)+ geom_smooth(method = "lm", size=3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
swirl()
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
q()
library(swirl)
swirl()
q()
library(swirl)
swirl()
swirl()
swirl(())
swirl()
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col="blue")
abline(h=4, col="red")
abline(h= 0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
q()
library(swirl)
swirl()
swirl()
cmat
points(cx,cy, col=c("red", "orange", "purple"), lwd=2, cex = 2 , pch = 3)
points(cx,cy, col=c("red", "orange", "purple"), pch= 3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2,2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2,lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red","green"), pchi=3, cex=3, lwd=3)
points(kmObj$centers, col=c("black", "red","green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$Cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$Cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$Cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red","green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%matv
matu%*%diag%*% t(matv)
svd(scale(mat))
prcomp(mat)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1])%*%t (svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1])%*%t (svd1$v[,1])
myImage(a1)
a1 <- (svd1$u[,2] * svd1$d[1])%*%t (svd1$v[,2])
a1 <- (svd1$u[,1:2] * svd1$d[1])%*%t (svd1$v[,1:2])
a1 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]%*%t (svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,2:5] %*% diag(svd1$d[2:5]) %*% t(svd1$v[,2:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[562,563])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[1:12])
myedit("ShowXY.R")
myedit("showXY.R")
showMe(1:6)
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd$u)
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12, maxCon])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6 )
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab = "Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab = "Walkdown Cluster")
q()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(p1) <- make.names(cnames[[1]], [wcol])
names(p1) <- make.names(cnames[[1]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = T)
sum(negative, na.rm = TRUE)
mean(neagative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.date(as.character(dates),"%Y%m%d")
dates <- as.Date(as.Character(dates),"%Y%m%d")
dates <- as.Date(as.character(dates),"%Y%m%d")
head(Dates)
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & County.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0, county.site == 63.2008)
pm0sub <- subset(cnt0, County.Code ==63 & Site.Id == 2008)
pm0sub <- subset(cnt0, County.Code ==63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code ==63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow= c(1,2))
par(mfrow= c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(h=median(x0sub, na.rm = TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm = TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <-
mn0 <- with(pm0, tapply(sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn0 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state= names(mn0), mean= mn0)
d1 <- data.frame(state= names(mn1), mean= mn1)
mrg <- merge(d0,d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(0.5,2.5)))
with(mrg, points(rep(3,52), mrg[,3]))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
q()
library(swirl)
swirl()
str
(mpg)
str(mpg)
quit()
getwd()
setwd("D:/DataScienceWorkSpace")
dir()
setwd("./RepData_PeerAssessment1")
## Load the Data
if(!file.exists('activity.csv')) {
unzip('activity.zip')
}
actData <- read.csv("activity.csv")
summary(actData)
## Preprocess the Data for formatting the date fields
actData$date = as.Date(actData$date)
library(dplyr)
s1 <- group_by(date, actData)
s1 <- group_by(actData, date)
s1
summary(s1)
str(s1)
summarize(s1, stepsperday = sum(steps))
library(dplyr)
## Calculate the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsperday = sum(steps, na.rm = TRUE))
## If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
## Calculate and report the mean and median of the total number of steps taken per day
library(dplyr)
## Calculate the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsperday = sum(steps, na.rm = TRUE))
stepsperday
## If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
## Calculate and report the mean and median of the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsperday = sum(steps, na.rm = TRUE))
stepsperday
library(dplyr)
## Calculate the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsTotal = sum(steps, na.rm = TRUE))
stepsperday
## If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
hist(stepsperday$stepsTotal)
## Calculate and report the mean and median of the total number of steps taken per day
library(dplyr)
## Calculate the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsTotal = sum(steps, na.rm = TRUE))
print(stepsperday)
## If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
hist(stepsperday$stepsTotal, main = "Histogram of Steps Per Day")
## Calculate and report the mean and median of the total number of steps taken per day
library(dplyr)
## Calculate the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsTotal = sum(steps, na.rm = TRUE))
print(stepsperday)
## If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
hist(stepsperday$stepsTotal, main = "Histogram of Steps Per Day", xlab = "Total Steps per day")
## Calculate and report the mean and median of the total number of steps taken per day
library(dplyr)
## Calculate the total number of steps taken per day
s1 <- group_by (actData, date)
stepsperday <- summarize(s1, stepsTotal = sum(steps, na.rm = TRUE))
print(stepsperday)
## If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
hist(stepsperday$stepsTotal, main = "Histogram of Steps Per Day", xlab = "Total Steps per day")
## Calculate and report the mean and median of the total number of steps taken per day
medianStepsperday <- median(stepsperday$stepsTotal)
meanStepsperday <- mean(stepsperday$stepsTotal)
## Median Steps per day
medianStepsperday
## Mean Steps per day
meanStepsperday
head(actData)
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
s2 <- group_by (actData, interval)
avgstepsperInterval <- summarize(s2, avgs = mean(steps, na.rm = TRUE))
print(avgstepsperInterval)
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
s2 <- group_by (actData, interval)
avgstepsperInterval <- summarize(s2, avgs = mean(steps, na.rm = TRUE))
print(avgstepsperInterval)
plot(avgstepsperInterval$interval, avgstepsperInterval$avgs, type = l, main = "Average Daily Acvity Pattern", xlab = "Day Interval in mins", ylab = "Average Steps across days")
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
s2 <- group_by (actData, interval)
avgstepsperInterval <- summarize(s2, avgs = mean(steps, na.rm = TRUE))
print(avgstepsperInterval)
plot(avgstepsperInterval$interval, avgstepsperInterval$avgs, type = "l", main = "Average Daily Acvity Pattern", xlab = "Day Interval in mins", ylab = "Average Steps across days")
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
quit()
